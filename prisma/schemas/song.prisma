model Songs {
  id                     String            @id @default(uuid()) @map("id")
  title                  String            @map("title")
  artists                String            @map("artists")
  lyricPreview           String            @map("lyric_preview")
  thumbnailLink          String?           @map("thumbnail_link")
  externalProvider       String            @map("external_provider")
  externalProviderSongId String            @map("external_provider_song_id")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @default(now()) @updatedAt @map("updated_at")
  RepertoireSongs        RepertoireSongs[]

  @@unique([externalProviderSongId])
  @@map("songs")
}

model RepertoireSongs {
  id          String  @id @default(uuid()) @map("id")
  lyrics      String  @map("lyrics")
  title       String  @map("title")
  label       String? @map("label")
  youtubeLink String? @map("youtube_link")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  songId       String     @map("song_id")
  song         Songs      @relation(fields: [songId], references: [id])
  repertoireId String
  Repertoire   Repertoire @relation(fields: [repertoireId], references: [id], onDelete: Cascade)

  @@map("repertoire_songs")
}

model Repertoire {
  id              String            @id @default(uuid()) @map("id")
  title           String            @map("title")
  description     String?           @map("description")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  RepertoireSongs RepertoireSongs[]
  EventMoments    EventMoments[]

  @@map("repertoires")
}
